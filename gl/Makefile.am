## Process this file with automake to produce Makefile.in.
# Copyright (C) 2004-2006 Free Software Foundation, Inc.
#
# This file is free software, distributed under the terms of the GNU
# General Public License.  As a special exception to the GNU General
# Public License, this file may be distributed as part of a program
# that contains a configuration script generated by Autoconf, under
# the same distribution terms as the rest of that program.
#
# Generated by gnulib-tool.
# Reproduce by: gnulib-tool --import --dir=. --local-dir=gl/override --lib=libgl --source-base=gl --m4-base=gl/m4 --doc-base=doc --aux-dir=. --libtool --macro-prefix=gl error exit fdl gendocs getaddrinfo getopt getpass gpl iconvme lgpl maintainer-makefile progname quote readline strdup sys_select unistd

AUTOMAKE_OPTIONS = 1.5 gnits no-dependencies

noinst_LTLIBRARIES = libgl.la

libgl_la_SOURCES =
libgl_la_LIBADD = @LTLIBOBJS@
libgl_la_LDFLAGS = $(AM_LDFLAGS)
noinst_HEADERS =
EXTRA_DIST =
BUILT_SOURCES =
SUFFIXES =
MOSTLYCLEANFILES = core *.stackdump
MOSTLYCLEANDIRS =
CLEANFILES =
DISTCLEANFILES =
MAINTAINERCLEANFILES =

AM_CPPFLAGS =

## begin gnulib module alloca-opt

BUILT_SOURCES += $(ALLOCA_H)
EXTRA_DIST += alloca_.h

# We need the following in order to create <alloca.h> when the system
# doesn't have one that works with the given compiler.
alloca.h: alloca_.h
	cp -f $(srcdir)/alloca_.h $@-t
	mv -f $@-t $@
MOSTLYCLEANFILES += alloca.h alloca.h-t

## end   gnulib module alloca-opt

## begin gnulib module arpa_inet

BUILT_SOURCES += $(ARPA_INET_H)

# We need the following in order to create <arpa/inet.h> when the system
# doesn't have one.
arpa/inet.h:
	test -d arpa || mkdir arpa
	rm -f $@-t $@
	echo '#include <sys/socket.h>' >$@-t
	mv $@-t $@
MOSTLYCLEANFILES += arpa/inet.h arpa/inet.h-t
MOSTLYCLEANDIRS += arpa

## end   gnulib module arpa_inet

## begin gnulib module exit

libgl_la_SOURCES += exit.h

## end   gnulib module exit

## begin gnulib module exitfail

EXTRA_DIST += exitfail.h

## end   gnulib module exitfail

## begin gnulib module getaddrinfo

libgl_la_SOURCES += getaddrinfo.h

## end   gnulib module getaddrinfo

## begin gnulib module getdelim

EXTRA_DIST += getdelim.h

## end   gnulib module getdelim

## begin gnulib module getline

EXTRA_DIST += getline.h

## end   gnulib module getline

## begin gnulib module getopt

BUILT_SOURCES += $(GETOPT_H)
EXTRA_DIST += getopt_.h getopt_int.h

# We need the following in order to create <getopt.h> when the system
# doesn't have one that works with the given compiler.
getopt.h: getopt_.h
	cp -f $(srcdir)/getopt_.h $@-t
	mv -f $@-t $@
MOSTLYCLEANFILES += getopt.h getopt.h-t

## end   gnulib module getopt

## begin gnulib module getpass

EXTRA_DIST += getpass.h

## end   gnulib module getpass

## begin gnulib module gettext-h

libgl_la_SOURCES += gettext.h

## end   gnulib module gettext-h

## begin gnulib module iconvme

libgl_la_SOURCES += iconvme.h iconvme.c
if GL_COND_LIBTOOL
libgl_la_LDFLAGS += $(LTLIBICONV)
endif

## end   gnulib module iconvme

## begin gnulib module inet_ntop

libgl_la_SOURCES += inet_ntop.h

## end   gnulib module inet_ntop

## begin gnulib module netinet_in

BUILT_SOURCES += $(NETINET_IN_H)

# We need the following in order to create <netinet/in.h> when the system
# doesn't have one.
netinet/in.h:
	test -d netinet || mkdir netinet
	rm -f $@-t $@
	echo '#include <sys/socket.h>' >$@-t
	mv $@-t $@
MOSTLYCLEANFILES += netinet/in.h netinet/in.h-t
MOSTLYCLEANDIRS += netinet

## end   gnulib module netinet_in

## begin gnulib module progname

libgl_la_SOURCES += progname.h progname.c

## end   gnulib module progname

## begin gnulib module quote

EXTRA_DIST += quote.h

## end   gnulib module quote

## begin gnulib module quotearg

EXTRA_DIST += quotearg.h

## end   gnulib module quotearg

## begin gnulib module readline

EXTRA_DIST += readline.h

## end   gnulib module readline

## begin gnulib module size_max

libgl_la_SOURCES += size_max.h

## end   gnulib module size_max

## begin gnulib module snprintf

libgl_la_SOURCES += snprintf.h

## end   gnulib module snprintf

## begin gnulib module stdbool

BUILT_SOURCES += $(STDBOOL_H)
EXTRA_DIST += stdbool_.h

# We need the following in order to create <stdbool.h> when the system
# doesn't have one that works.
stdbool.h: stdbool_.h
	rm -f $@-t $@
	sed -e 's/@''HAVE__BOOL''@/$(HAVE__BOOL)/g' < $(srcdir)/stdbool_.h > $@-t
	mv $@-t $@
MOSTLYCLEANFILES += stdbool.h stdbool.h-t

## end   gnulib module stdbool

## begin gnulib module strdup

EXTRA_DIST += strdup.h

## end   gnulib module strdup

## begin gnulib module sys_select

BUILT_SOURCES += $(SYS_SELECT_H)

# We need the following in order to create <sys/select.h> when the system
# doesn't have one that works with the given compiler.
sys/select.h:
	test -d sys || mkdir sys
	rm -f $@-t $@
	echo '#include <sys/socket.h>' >$@-t
	mv $@-t $@
MOSTLYCLEANFILES += sys/select.h sys/select.h-t
MOSTLYCLEANDIRS += sys

## end   gnulib module sys_select

## begin gnulib module sys_socket

BUILT_SOURCES += $(SYS_SOCKET_H)
EXTRA_DIST += socket_.h

# We need the following in order to create <sys/socket.h> when the system
# doesn't have one that works with the given compiler.
sys/socket.h: socket_.h
	test -d sys || mkdir sys
	cp -f $(srcdir)/socket_.h $@-t
	mv -f $@-t $@
MOSTLYCLEANFILES += sys/socket.h sys/socket.h-t
MOSTLYCLEANDIRS += sys

## end   gnulib module sys_socket

## begin gnulib module unistd

BUILT_SOURCES += $(UNISTD_H)

# We need the following in order to create an empty placeholder for
# <unistd.h> when the system doesn't have one.
unistd.h:
	echo '/* Empty placeholder for $@.  */' >$@
MOSTLYCLEANFILES += unistd.h

## end   gnulib module unistd

## begin gnulib module vasnprintf

libgl_la_SOURCES += printf-args.h printf-parse.h vasnprintf.h

## end   gnulib module vasnprintf

## begin gnulib module xalloc

EXTRA_DIST += xalloc.h

## end   gnulib module xalloc

## begin gnulib module xalloc-die

libgl_la_SOURCES += xalloc-die.c

## end   gnulib module xalloc-die

## begin gnulib module xsize

libgl_la_SOURCES += xsize.h

## end   gnulib module xsize


mostlyclean-local: mostlyclean-generic
	@test -z "$(MOSTLYCLEANDIRS)" || \
	  for dir in $(MOSTLYCLEANDIRS); do \
	    if test -d $$dir; then \
	      echo "rmdir $$dir"; rmdir $$dir; \
	    fi; \
	  done
