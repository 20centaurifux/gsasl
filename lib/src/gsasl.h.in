/* gsasl.h --- Header file for GNU SASL Library.                      -*- c -*-
 * Copyright (C) 2002, 2003, 2004  Simon Josefsson
 *
 * This file is part of GNU SASL Library.
 *
 * GNU SASL Library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * GNU SASL Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * License along with GNU SASL Library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

#ifndef GSASL_H
# define GSASL_H

# include <stdio.h>		/* FILE */
# include <stddef.h>		/* size_t */
# include <unistd.h>		/* ssize_t */

# ifdef __cplusplus
extern "C"
{
# endif

# define GSASL_VERSION "@PACKAGE_VERSION@"

/* Quoting RFC 2222:
   SASL mechanisms are named by strings, from 1 to 20 characters in
   length, consisting of upper-case letters, digits, hyphens, and/or
   underscores.  SASL mechanism names must be registered with the IANA. */
  enum
  {
    GSASL_MIN_MECHANISM_SIZE = 1,
    GSASL_MAX_MECHANISM_SIZE = 20
  };
  extern const char *GSASL_VALID_MECHANISM_CHARACTERS;

/* Error codes */
  typedef enum
  {
    GSASL_OK = 0,
    GSASL_NEEDS_MORE,
    GSASL_UNKNOWN_MECHANISM,
    GSASL_MECHANISM_CALLED_TOO_MANY_TIMES,
    GSASL_TOO_SMALL_BUFFER,
    GSASL_FOPEN_ERROR,
    GSASL_FCLOSE_ERROR,
    GSASL_MALLOC_ERROR,
    GSASL_BASE64_ERROR,
    GSASL_CRYPTO_ERROR,
    GSASL_GCRYPT_ERROR = GSASL_CRYPTO_ERROR,
    GSASL_NEED_CLIENT_ANONYMOUS_CALLBACK,
    GSASL_NEED_CLIENT_PASSWORD_CALLBACK,
    GSASL_NEED_CLIENT_PASSCODE_CALLBACK,
    GSASL_NEED_CLIENT_PIN_CALLBACK,
    GSASL_NEED_CLIENT_AUTHORIZATION_ID_CALLBACK,
    GSASL_NEED_CLIENT_AUTHENTICATION_ID_CALLBACK,
    GSASL_NEED_CLIENT_SERVICE_CALLBACK,
    GSASL_NEED_SERVER_VALIDATE_CALLBACK,
    GSASL_NEED_SERVER_CRAM_MD5_CALLBACK,
    GSASL_NEED_SERVER_DIGEST_MD5_CALLBACK,
    GSASL_NEED_SERVER_EXTERNAL_CALLBACK,
    GSASL_NEED_SERVER_ANONYMOUS_CALLBACK,
    GSASL_NEED_SERVER_REALM_CALLBACK,
    GSASL_NEED_SERVER_SECURID_CALLBACK,
    GSASL_NEED_SERVER_SERVICE_CALLBACK,
    GSASL_NEED_SERVER_GSSAPI_CALLBACK,
    GSASL_NEED_SERVER_RETRIEVE_CALLBACK,
    GSASL_UNICODE_NORMALIZATION_ERROR,
    GSASL_SASLPREP_ERROR,
    GSASL_MECHANISM_PARSE_ERROR,
    GSASL_AUTHENTICATION_ERROR,
    GSASL_CANNOT_GET_CTX,
    GSASL_INTEGRITY_ERROR,
    GSASL_NO_MORE_REALMS,
    GSASL_NO_CLIENT_CODE,
    GSASL_NO_SERVER_CODE,
    GSASL_NO_CALLBACK,
    GSASL_NO_ANONYMOUS_TOKEN,
    GSASL_NO_AUTHID,
    GSASL_NO_AUTHZID,
    GSASL_NO_PASSWORD,
    /* Mechanism specific errors. */
    GSASL_GSSAPI_RELEASE_BUFFER_ERROR,
    GSASL_GSSAPI_IMPORT_NAME_ERROR,
    GSASL_GSSAPI_INIT_SEC_CONTEXT_ERROR,
    GSASL_GSSAPI_ACCEPT_SEC_CONTEXT_ERROR,
    GSASL_GSSAPI_UNWRAP_ERROR,
    GSASL_GSSAPI_WRAP_ERROR,
    GSASL_GSSAPI_ACQUIRE_CRED_ERROR,
    GSASL_GSSAPI_DISPLAY_NAME_ERROR,
    GSASL_GSSAPI_UNSUPPORTED_PROTECTION_ERROR,
    GSASL_KERBEROS_V5_INIT_ERROR,
    GSASL_KERBEROS_V5_INTERNAL_ERROR,
    GSASL_SHISHI_ERROR = GSASL_KERBEROS_V5_INTERNAL_ERROR,
    GSASL_SECURID_SERVER_NEED_ADDITIONAL_PASSCODE,
    GSASL_SECURID_SERVER_NEED_NEW_PIN,
    GSASL_INVALID_HANDLE
  } Gsasl_rc;

/* Quality of Protection types, used by DIGEST-MD5 */
  typedef enum
  {
    GSASL_QOP_AUTH = 1,
    GSASL_QOP_AUTH_INT = 2,
    GSASL_QOP_AUTH_CONF = 4
  } Gsasl_qop;

/* Cipher types, used by DIGEST-MD5 */
  typedef enum
  {
    GSASL_CIPHER_DES = 1,
    GSASL_CIPHER_3DES = 2,
    GSASL_CIPHER_RC4 = 4,
    GSASL_CIPHER_RC4_40 = 8,
    GSASL_CIPHER_RC4_56 = 16,
    GSASL_CIPHER_AES = 32
  } Gsasl_cipher;

/* Library handles */
  typedef struct Gsasl Gsasl;
  typedef struct Gsasl_session Gsasl_session;

  /* Callback/property types. */
  typedef enum
  {
    GSASL_CLIENT_ANONYMOUS,
    GSASL_CLIENT_AUTHID,
    GSASL_CLIENT_AUTHZID,
    GSASL_CLIENT_PASSWORD,
    GSASL_CLIENT_PASSCODE,
    GSASL_CLIENT_PIN,
    GSASL_CLIENT_SERVICE,
    GSASL_CLIENT_QOP,
    GSASL_CLIENT_MAXBUF,
    GSASL_SERVER_VALIDATE,
    GSASL_SERVER_RETRIEVE,
    GSASL_SERVER_USEROK,
    GSASL_SERVER_SECURID,
    GSASL_SERVER_CRAM_MD5,
    GSASL_SERVER_DIGEST_MD5,
    GSASL_SERVER_SERVICE,
    GSASL_SERVER_EXTERNAL,
    GSASL_SERVER_ANONYMOUS,
    GSASL_SERVER_REALM,
    GSASL_SERVER_QOP,
    GSASL_SERVER_MAXBUF,
    GSASL_SERVER_CIPHER
  } Gsasl_property;

  /**
   * Gsasl_callback_function:
   * @ctx: libgsasl handle.
   * @sctx: session handle, may be NULL.
   * @prop: enumerated value of Gsasl_property type.
   *
   * Prototype of function that the application should implement.  Use
   * gsasl_callback_set() or gsasl_callback_set_global() to inform the
   * library about your callback function.
   *
   * It is called by the SASL library when it need some information from
   * the application.  Depending on the value of @prop, it should either
   * set some property (e.g., username or password) using
   * gsasl_property_set() and gsasl_property_set_global(), or it should
   * extract some properties (e.g., authentication and authorization
   * identities) using gsasl_property_fast() and use them to make a
   * policy decision, perhaps returning GSASL_AUTHENTICATION_ERROR or
   * GSASL_OK depending on whether the policy permitted the operation.
   *
   * Return value: Any valid return code, the interpretation of which
   *   depend on the @prop value.
   **/
  typedef int (*Gsasl_callback_function) (Gsasl * ctx, Gsasl_session * sctx,
					  Gsasl_property prop);

/* Library entry and exit points: version.c, init.c, done.c */
  extern int gsasl_init (Gsasl ** ctx);
  extern void gsasl_done (Gsasl * ctx);
  extern const char *gsasl_check_version (const char *req_version);

/* Callback handling: callback.c */
  extern void gsasl_application_data_set (Gsasl * ctx, void *appdata);
  extern void *gsasl_application_data_get (Gsasl * ctx);
  extern void gsasl_appinfo_set (Gsasl_session * sctx, void *appdata);
  extern void *gsasl_appinfo_get (Gsasl_session * sctx);
  extern void gsasl_callback_set (Gsasl_session * sctx,
				  Gsasl_callback_function cb);
  extern void gsasl_callback_set_global (Gsasl * ctx,
					 Gsasl_callback_function cb);
  extern int gsasl_callback (Gsasl_session * sctx, Gsasl_property prop);
  extern int gsasl_callback_global (Gsasl * ctx, Gsasl_property prop);

  /* Property handling: property.c */
  extern void gsasl_property_set (Gsasl_session * sctx, Gsasl_property prop,
				  const char *data);
  extern void gsasl_property_set_global (Gsasl * ctx, Gsasl_property prop,
					 const char *data);
  extern const char *gsasl_property_get (Gsasl_session * sctx,
					 Gsasl_property prop);
  extern const char *gsasl_property_get_global (Gsasl * ctx,
						Gsasl_property prop);
  extern const char *gsasl_property_fast (Gsasl_session * sctx,
					  Gsasl_property prop);
  extern const char *gsasl_property_fast_global (Gsasl * ctx,
						 Gsasl_property prop);

/* Mechanism handling: listmech.c, supportp.c, suggest.c */
  extern int gsasl_client_mechlist (Gsasl * ctx, char **out);
  extern int gsasl_client_support_p (Gsasl * ctx, const char *name);
  extern const char *gsasl_client_suggest_mechanism (Gsasl * ctx,
						     const char *mechlist);

  extern int gsasl_server_mechlist (Gsasl * ctx, char **out);
  extern int gsasl_server_support_p (Gsasl * ctx, const char *name);
  extern const char *gsasl_server_suggest_mechanism (Gsasl * ctx,
						     const char *mechlist);

/* Authentication functions: xstart.c, xstep.c, xfinish.c */
  extern int gsasl_client_start (Gsasl * ctx, const char *mech,
				 Gsasl_session ** sctx);
  extern int gsasl_server_start (Gsasl * ctx, const char *mech,
				 Gsasl_session ** sctx);
  extern int gsasl_step (Gsasl_session * sctx,
			 const char *input, size_t input_len,
			 char **output, size_t * output_len);
  extern int gsasl_step64 (Gsasl_session * sctx,
			   const char *b64input, char **b64output);
  extern void gsasl_finish (Gsasl_session * sctx);

/* Session functions: xcode.c */
  extern int gsasl_encode (Gsasl_session * sctx,
			   const char *input, size_t input_len,
			   char *output, size_t * output_len);
  extern int gsasl_decode (Gsasl_session * sctx,
			   const char *input, size_t input_len,
			   char *output, size_t * output_len);

/* Error handling: error.c */
  extern const char *gsasl_strerror (int err);

  /* Internationalized string processing: stringprep.c */
  extern char *gsasl_stringprep_nfkc (const char *in, ssize_t len);
  extern char *gsasl_stringprep_saslprep (const char *in, int *stringprep_rc);
  extern char *gsasl_stringprep_trace (const char *in, int *stringprep_rc);

/* Utilities: base64.c, md5pwd.c, crypto.c */
  extern int gsasl_base64_encode (char const *src, size_t srclength,
				  char *target, size_t targsize);
  extern int gsasl_base64_decode (char const *src,
				  char *target, size_t targsize);
  extern int gsasl_md5pwd_get_password (const char *filename,
					const char *username,
					char *key, size_t * keylen);
  extern int gsasl_nonce (char *data, size_t datalen);
  extern int gsasl_random (char *data, size_t datalen);
  extern int gsasl_md5 (const char *in, size_t inlen, char *out[16]);
  extern int gsasl_hmac_md5 (const char *key, size_t keylen,
			     const char *in, size_t inlen, char *outhash[16]);

  /* For compatibility with earlier versions. */
# include <gsasl-compat.h>

# ifdef __cplusplus
}
# endif

#endif				/* GSASL_H */
